name: CI Workflow

on:
  schedule:
    - cron: '0 0 * * 5'
  push:
    branches: [ main ]
    paths:
      - 'gradle/**'
      - '**.gradle'
      - 'gradle.properties'
      - 'app/**'
      - 'ft/**'
      - 'mocks/**'
      - 'docker-compose.app.yml'
      - 'docker-compose.test.yml'
      - '.github/workflows/ci-workflow.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'gradle/**'
      - '**.gradle'
      - 'gradle.properties'
      - 'app/**'
      - 'ft/**'
      - 'mocks/**'
      - 'docker-compose.app.yml'
      - 'docker-compose.test.yml'
      - '.github/workflows/ci-workflow.yml'

  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'info'
        type: choice
        options:
          - info
          - warning
          - debug

jobs:
  build-and-unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build + unit tests
        run: ./gradlew :app:build

      - name: Upload unit tests report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-tests-report
          path: |
            app/build/reports/tests/test/**/*

      - name: Set repository basename
        id: set-basename
        run: echo "REPO_BASENAME=$(basename ${{ github.repository }})" >> $GITHUB_ENV

      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: app/build/libs/${{ env.REPO_BASENAME }}.jar

  functional-tests:
    needs: build-and-unit-tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Download JAR
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: app/build/libs/

      - name: Start docker containers (docker-compose)
        run: docker compose -f docker-compose.test.yml up -d

      - name: Wait for services to be healthy
        run: |
          echo "Waiting for services to be healthy..."
          MAX_ATTEMPTS=5
          ATTEMPT=0
          until [ "$ATTEMPT" -ge "$MAX_ATTEMPTS" ]
          do
            docker compose ps | grep -q "healthy" && break
            ATTEMPT=$((ATTEMPT+1))
            echo "Attempt $ATTEMPT/$MAX_ATTEMPTS: Services not healthy yet, waiting..."
            sleep 5
          done
          if [ "$ATTEMPT" -ge "$MAX_ATTEMPTS" ]; then
            echo "Services did not become healthy after $MAX_ATTEMPTS attempts."
            exit 1
          fi

      - name: Run functional tests
        run: ./gradlew :ft:cucumber --no-daemon

      - name: Archive Cucumber test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cucumber-tests-report
          path: |
            ft/reports/cucumber-report.html

      - name: Print Docker container logs
        run: |
          container_ids=$(docker ps --format '{{.ID}}')

          for container_id in $container_ids; do
            echo "Logs for container $container_id:"
            docker logs $container_id
            echo "------------------------------------------"
          done

      - name: Stop Docker Compose
        if: always()
        run: docker compose down

  docker-image:
    if: github.ref == 'refs/heads/main'
    needs: functional-tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download JAR
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: app/build/libs/

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set repository basename
        id: set-basename
        run: echo "REPO_BASENAME=$(basename ${{ github.repository }})" >> $GITHUB_ENV

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/groot-mg/test/${{ env.REPO_BASENAME }}
          tags: |
            type=sha

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: app/
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  trigger-integration:
    if: github.ref == 'refs/heads/main'
    needs: docker-image
    runs-on: ubuntu-latest
    steps:
      - name: Set repository basename
        id: set-basename
        run: echo "REPO_BASENAME=$(basename ${{ github.repository }})" >> $GITHUB_ENV

      - name: Trigger integration tests
        if: success()
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.INTEGRATION_TRIGGER_TOKEN }}
          repository: groot-mg/integration-tests
          event-type: service-updated
          client-payload: '{"service": "${{ env.REPO_BASENAME }}"}'
