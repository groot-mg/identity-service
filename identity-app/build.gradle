import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    alias(libs.plugins.spring.boot)
    alias(libs.plugins.spring.dependency.management)
    alias(libs.plugins.git.properties)
    alias(libs.plugins.axion.release)
    alias(libs.plugins.lombok)
    alias(libs.plugins.jacoco)
    alias(libs.plugins.java)
}

jacoco {
    toolVersion = "0.8.12"
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

scmVersion {
    tag { prefix = rootProject.name + '-' }
    versionIncrementer 'incrementMinor'
}
project.version = scmVersion.version

bootJar {
    archiveFileName = "${rootProject.name}.jar"
}

springBoot {
    buildInfo {
        properties {
            name = rootProject.name
            version = project.version
            additional = [
                    host           : InetAddress.localHost.hostName,
                    hostAddress    : InetAddress.localHost.getHostAddress(),
                    operatingSystem: DefaultNativePlatform.currentOperatingSystem.getInternalOs().toString()
            ]
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation(libs.spring.boot.starter.web)
    implementation(libs.spring.boot.starter.actuator)
    implementation(libs.spring.boot.starter.validation)
    implementation(libs.springdoc.openapi)

    implementation(libs.keycloak.admin.client)
    implementation(libs.micrometer.prometheus)

    testImplementation(libs.spring.boot.starter.test)
}

test {
    useJUnitPlatform()
}

test.finalizedBy jacocoTestReport
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "com/generoso/identity/IdentityApplication.class"
            ])
        }))
    }
    reports {
        xml.required = true
    }
}